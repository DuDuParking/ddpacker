import java.util.regex.Pattern

apply plugin: 'android'
apply plugin: 'packer'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0+'
        classpath 'com.mcxiaoke.gradle:packer:1.0.+'
    }
}

ext.multiarch=false

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    for (subproject in getProjectList()) {
        compile project(subproject)
    }
}

android {
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    defaultConfig {
        versionCode 100002
        versionName "1.0.0"
    }

    packer {
        // 指定渠道打包输出目录
        archiveOutput = file(new File(project.rootProject.buildDir.path, "apks"))
        // 指定渠道打包输出文件名格式
        archiveNameFormat = 'dudu_parking-${flavorName}-${buildType}-v${versionName}-${versionCode}'
        // 指定渠道打包需要修改的AndroidManifest文件项
        manifestMatcher = ['UMENG_CHANNEL']
        // 指定是否使用build版本号自增
        buildNumberAuto = true
        // 指定使用版本号自增的buildType，默认是全部
        buildNumberTypeMatcher = ['release', 'beta']
    }

    signingConfigs {
        release {
            storeFile file('my-release-key.keystore')
            storePassword '123456'
            keyPassword '123456'
            keyAlias 'my-release-key.keystore'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            manifestPlaceholders = [ getuiAppId:"0J2ipM3D2V5WQDpWnQZC1"
                                    , getuiAppKey:"qaHlPWSeAu9M5bG9D8akm7"
                                    , getuiAppSecret:"PQDrPT2Zgy7Izo1z0MxSi6"
            ]
        }
        beta {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable true
            manifestPlaceholders = [ getuiAppId:"0J2ipM3D2V5WQDpWnQZC1"
                                     , getuiAppKey:"qaHlPWSeAu9M5bG9D8akm7"
                                     , getuiAppSecret:"PQDrPT2Zgy7Izo1z0MxSi6"
            ]
        }
        debug {
            minifyEnabled false
            debuggable true
            manifestPlaceholders = [ getuiAppId:"0J2ipM3D2V5WQDpWnQZC1"
                                     , getuiAppKey:"qaHlPWSeAu9M5bG9D8akm7"
                                     , getuiAppSecret:"PQDrPT2Zgy7Izo1z0MxSi6"
            ]
        }
    }

    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    if (multiarch || System.env.BUILD_MULTIPLE_APKS) {
        productFlavors {
            armv7 {
                versionCode defaultConfig.versionCode + 2
                ndk {
                    abiFilters "armeabi-v7a", ""
                }
            }
            x86 {
                versionCode defaultConfig.versionCode + 4
                ndk {
                    abiFilters "x86", ""
                }
            }
            all {
                ndk {
                    abiFilters "all", ""
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

def getVersionCodeFromManifest() {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}

def getProjectList() {
    def manifestFile = file("project.properties")
    def pattern = Pattern.compile("android.library.reference.(\\d+)\\s*=\\s*(.*)")
    def matcher = pattern.matcher(manifestFile.getText())
    def projects = []
    while (matcher.find()) {
      projects.add(":" + matcher.group(2).replace("/",":"))
    }
    return projects
}
